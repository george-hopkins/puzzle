/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const __PUZZLE_H__: u32 = 1;
pub const PUZZLE_VERSION_MAJOR: u32 = 0;
pub const PUZZLE_VERSION_MINOR: u32 = 11;
pub const PUZZLE_CVEC_SIMILARITY_THRESHOLD: f64 = 0.6;
pub const PUZZLE_CVEC_SIMILARITY_HIGH_THRESHOLD: f64 = 0.7;
pub const PUZZLE_CVEC_SIMILARITY_LOW_THRESHOLD: f64 = 0.3;
pub const PUZZLE_CVEC_SIMILARITY_LOWER_THRESHOLD: f64 = 0.2;
#[repr(C)]
pub struct PuzzleDvec_ {
    pub sizeof_vec: usize,
    pub sizeof_compressed_vec: usize,
    pub vec: *mut f64,
}
#[test]
fn bindgen_test_layout_PuzzleDvec_() {
    assert_eq!(
        ::std::mem::size_of::<PuzzleDvec_>(),
        24usize,
        concat!("Size of: ", stringify!(PuzzleDvec_))
    );
    assert_eq!(
        ::std::mem::align_of::<PuzzleDvec_>(),
        8usize,
        concat!("Alignment of ", stringify!(PuzzleDvec_))
    );
}
pub type PuzzleDvec = PuzzleDvec_;
#[repr(C)]
pub struct PuzzleCvec_ {
    pub sizeof_vec: usize,
    pub vec: *mut ::std::os::raw::c_schar,
}
#[test]
fn bindgen_test_layout_PuzzleCvec_() {
    assert_eq!(
        ::std::mem::size_of::<PuzzleCvec_>(),
        16usize,
        concat!("Size of: ", stringify!(PuzzleCvec_))
    );
    assert_eq!(
        ::std::mem::align_of::<PuzzleCvec_>(),
        8usize,
        concat!("Alignment of ", stringify!(PuzzleCvec_))
    );
}
pub type PuzzleCvec = PuzzleCvec_;
#[repr(C)]
pub struct PuzzleCompressedCvec_ {
    pub sizeof_compressed_vec: usize,
    pub vec: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_PuzzleCompressedCvec_() {
    assert_eq!(
        ::std::mem::size_of::<PuzzleCompressedCvec_>(),
        16usize,
        concat!("Size of: ", stringify!(PuzzleCompressedCvec_))
    );
    assert_eq!(
        ::std::mem::align_of::<PuzzleCompressedCvec_>(),
        8usize,
        concat!("Alignment of ", stringify!(PuzzleCompressedCvec_))
    );
}
pub type PuzzleCompressedCvec = PuzzleCompressedCvec_;
#[repr(C)]
pub struct PuzzleContext_ {
    pub puzzle_max_width: ::std::os::raw::c_uint,
    pub puzzle_max_height: ::std::os::raw::c_uint,
    pub puzzle_lambdas: ::std::os::raw::c_uint,
    pub puzzle_p_ratio: f64,
    pub puzzle_noise_cutoff: f64,
    pub puzzle_contrast_barrier_for_cropping: f64,
    pub puzzle_max_cropping_ratio: f64,
    pub puzzle_enable_autocrop: ::std::os::raw::c_int,
    pub magic: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_PuzzleContext_() {
    assert_eq!(
        ::std::mem::size_of::<PuzzleContext_>(),
        64usize,
        concat!("Size of: ", stringify!(PuzzleContext_))
    );
    assert_eq!(
        ::std::mem::align_of::<PuzzleContext_>(),
        8usize,
        concat!("Alignment of ", stringify!(PuzzleContext_))
    );
}
pub type PuzzleContext = PuzzleContext_;
extern "C" {
    pub fn puzzle_init_context(context: *mut PuzzleContext);
}
extern "C" {
    pub fn puzzle_free_context(context: *mut PuzzleContext);
}
extern "C" {
    pub fn puzzle_set_max_width(
        context: *mut PuzzleContext,
        width: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_max_height(
        context: *mut PuzzleContext,
        height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_lambdas(
        context: *mut PuzzleContext,
        lambdas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_noise_cutoff(
        context: *mut PuzzleContext,
        noise_cutoff: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_p_ratio(context: *mut PuzzleContext, p_ratio: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_contrast_barrier_for_cropping(
        context: *mut PuzzleContext,
        barrier: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_max_cropping_ratio(
        context: *mut PuzzleContext,
        ratio: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_set_autocrop(
        context: *mut PuzzleContext,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_init_cvec(context: *mut PuzzleContext, cvec: *mut PuzzleCvec);
}
extern "C" {
    pub fn puzzle_init_dvec(context: *mut PuzzleContext, dvec: *mut PuzzleDvec);
}
extern "C" {
    pub fn puzzle_fill_dvec_from_file(
        context: *mut PuzzleContext,
        dvec: *mut PuzzleDvec,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_fill_cvec_from_file(
        context: *mut PuzzleContext,
        cvec: *mut PuzzleCvec,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_fill_dvec_from_mem(
        context: *mut PuzzleContext,
        dvec: *mut PuzzleDvec,
        mem: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_fill_cvec_from_mem(
        context: *mut PuzzleContext,
        cvec: *mut PuzzleCvec,
        mem: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_fill_cvec_from_dvec(
        context: *mut PuzzleContext,
        cvec: *mut PuzzleCvec,
        dvec: *const PuzzleDvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_fill_dvec_from_view(
        context: *mut PuzzleContext,
        dvec: *mut PuzzleDvec,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        view: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_fill_cvec_from_view(
        context: *mut PuzzleContext,
        cvec: *mut PuzzleCvec,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        view: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_free_cvec(context: *mut PuzzleContext, cvec: *mut PuzzleCvec);
}
extern "C" {
    pub fn puzzle_free_dvec(context: *mut PuzzleContext, dvec: *mut PuzzleDvec);
}
extern "C" {
    pub fn puzzle_dump_cvec(
        context: *mut PuzzleContext,
        cvec: *const PuzzleCvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_dump_dvec(
        context: *mut PuzzleContext,
        dvec: *const PuzzleDvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_cvec_cksum(
        context: *mut PuzzleContext,
        cvec: *const PuzzleCvec,
        sum: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_init_compressed_cvec(
        context: *mut PuzzleContext,
        compressed_cvec: *mut PuzzleCompressedCvec,
    );
}
extern "C" {
    pub fn puzzle_free_compressed_cvec(
        context: *mut PuzzleContext,
        compressed_cvec: *mut PuzzleCompressedCvec,
    );
}
extern "C" {
    pub fn puzzle_compress_cvec(
        context: *mut PuzzleContext,
        compressed_cvec: *mut PuzzleCompressedCvec,
        cvec: *const PuzzleCvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_uncompress_cvec(
        context: *mut PuzzleContext,
        compressed_cvec: *const PuzzleCompressedCvec,
        cvec: *mut PuzzleCvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_vector_sub(
        context: *mut PuzzleContext,
        cvecr: *mut PuzzleCvec,
        cvec1: *const PuzzleCvec,
        cvec2: *const PuzzleCvec,
        fix_for_texts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puzzle_vector_euclidean_length(
        context: *mut PuzzleContext,
        cvec: *const PuzzleCvec,
    ) -> f64;
}
extern "C" {
    pub fn puzzle_vector_normalized_distance(
        context: *mut PuzzleContext,
        cvec1: *const PuzzleCvec,
        cvec2: *const PuzzleCvec,
        fix_for_texts: ::std::os::raw::c_int,
    ) -> f64;
}
